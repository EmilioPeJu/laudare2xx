#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("../../dbd/laudaRE2xx.dbd")
#! DBDEND


# ############################################################
# 
# Template file for lauda Microcool devices
# 
# Macros:
# % macro,  P,    Prefix for PV name
# % macro,  PORT, Bus/Port Address (eg. ASYN Port).
# % macro,  ADDR, Address on the bus (optional)
# % macro,  SCAN, SCAN rate for read parameters.
# % macro,  HIHI, HIHI value for input temperature
# % macro,  HIGH, HIGH value for input temperature
# % macro,  LOW,  LOW value for input temperature
# % macro,  LOLO, LOLO value for input temperature
# % macro,  name, object and gui association name
# % macro,  DESC, Description
# 
# ##############################################################
# % gui, $(name=), edmembed, lMCxxx_embed.edl, P=$(P),EDM_FILE=lMCxxx.edl
# % gui, $(name=), edm, EDM_FILE=lMCxxx.edl, P=$(P)
# % gui, $(name=), boydetail,laudaRE2xxApp_opi/laudaMCxxx_detail.opi, P=$(P), DESC=$(DESC)
# % gui, $(name=), boyembed, laudaRE2xxApp_opi/laudaMCxxx_embed_box.opi, P=$(P), DESC=$(DESC)
# % gui, $(name=), boyembed, laudaRE2xxApp_opi/laudaMCxxx_embed.opi, P=$(P), DESC=$(DESC)
# % gui, $(name=), enum, Communications,   $(P):DISABLE
# % gui, $(name=), demand, Water temperature,   $(P):SET_TEMP
# % gui, $(name=), readback, Water temperature,   $(P):TEMP
# % gui, $(name=), statusbits, Status,   $(P):STATUS, Error, Power, None, None, Water Low Level
# % gui, $(name=), demand, Command,   $(P):COMMAND
# % gui, $(name=), readback, Response,   $(P):RESPONSE
# ##############################################################
# Read records
# ##############################################################
# ///
# /// Read the water temperature.
# ///
# % archiver 10 Monitor
# % alh $SEVRCOMMAND UP_ANY dls-alh-handler.py $(P):TEMP
record(ai, "$(P):TEMP") {
  field(DTYP, "stream")
  field(INP, "@lMCxxx.proto getTemp $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(EGU, "C")
  field(HIHI, "$(HIHI)")
  field(HIGH, "$(HIGH)")
  field(LOW, "$(LOW)")
  field(LOLO, "$(LOLO)")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
  field(LLSV, "MAJOR")
  field(PREC, "2")
  field(HYST, "0.1")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read temperature setpoint (read back of setTemp)
# ///
# % archiver 10 Monitor
record(ai, "$(P):SET_TEMP:RBV") {
  field(DTYP, "stream")
  field(INP, "@lMCxxx.proto getTempReadback $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(EGU, "C")
  field(PREC, "2")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read the status bits
# ///
#% archiver 10 Monitor
#% alh $SEVRCOMMAND UP_ANY dls-alh-handler.py $(P):STATUS
record(ai, "$(P):STATUS") {
  field(DTYP, "stream")
  field(INP, "@lMCxxx.proto getStatus $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(HHSV, "MAJOR")
  field(HIHI, "1")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read the power status
# ///
record(bi, "$(P):POWER") {
  field(DTYP, "stream")
  field(INP, "@lMCxxx.proto getPowerStatus $(PORT) $(ADDR)")
  field(SCAN, "1 second")
  field(ZNAM, "Off")
  field(ONAM, "On")
  field(SDIS, "$(P):DISABLE")
}

################################################################
# Write records
################################################################
# ///
# /// Set the setpoint water temperature (temperature must be specific format (up to 3 digits before decimal point and up to 2 digits after decimal point).
# ///
#% autosave 1 VAL
record(ao, "$(P):SET_TEMP") {
  field(DTYP, "stream")
  field(DESC, "Setpoint temperature")
  field(OUT, "@lMCxxx.proto setTemp $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Switch device to standby
# ///
record(bo, "$(P):STANDBY") {
  field(DTYP, "stream")
  field(DESC, "Switch device to standby")
  field(OUT, "@lMCxxx.proto stop $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Switch device on
# ///
record(bo, "$(P):ON") {
  field(DTYP, "stream")
  field(DESC, "Switch device on")
  field(OUT, "@lMCxxx.proto start $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

#################################################################
# Generic protocol PV, to send any command.
#################################################################
# ///
# /// Generic commands. Do a caput on this, and do a subsequent caget to get the response. Max 39 chars.
# ///
record(stringin, "$(P):RESPONSE") {
  field(DTYP, "stream")
  field(DESC, "Command string response.")
  field(INP, "@lMCxxx.proto gen $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Generic command. This holds the command and stores it.
# ///
record(stringout, "$(P):COMMAND") {
  field(DESC, "Holds command string.")
  field(OUT, "$(P):RESPONSE")
  field(FLNK, "$(P):RESPONSE")
}

# % autosave 1 VAL
record(bo, "$(P):DISABLE") {
  field(DESC, "Disable comms")
  field(PINI, "YES")
  field(VAL, "1")
  field(OMSL, "supervisory")
  field(ZNAM, "Enabled")
  field(ONAM, "Disabled")
}

#################################################################
# Error status (From protocol mismatch)
#################################################################
record(stringin, "$(P):ERROR") {
  field(DESC, "Error response")
}

#! Further lines contain data used by VisualDCT
#! View(0,0,1.0)
#! Record("$(P):TEMP",20,15,0,0,"$(P):TEMP")
#! Field("$(P):TEMP.SDIS",16777215,1,"$(P):TEMP.SDIS")
#! Link("$(P):TEMP.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):SET_TEMP:RBV",20,720,0,0,"$(P):SET_TEMP:RBV")
#! Field("$(P):SET_TEMP:RBV.SDIS",16777215,1,"$(P):SET_TEMP:RBV.SDIS")
#! Link("$(P):SET_TEMP:RBV.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):STATUS",20,420,0,0,"$(P):STATUS")
#! Field("$(P):STATUS.SDIS",16777215,1,"$(P):STATUS.SDIS")
#! Link("$(P):STATUS.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):POWER",340,740,0,0,"$(P):POWER")
#! Field("$(P):POWER.SDIS",16777215,0,"$(P):POWER.SDIS")
#! Link("$(P):POWER.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):SET_TEMP",680,528,0,0,"$(P):SET_TEMP")
#! Field("$(P):SET_TEMP.SDIS",16777215,0,"$(P):SET_TEMP.SDIS")
#! Link("$(P):SET_TEMP.SDIS","$(P):SET_TEMP/SDIS")
#! Connector("$(P):SET_TEMP/SDIS","$(P):DISABLE.VAL",600,670,16777215,"",0)
#! Record("$(P):STANDBY",340,348,0,0,"$(P):STANDBY")
#! Field("$(P):STANDBY.SDIS",16777215,0,"$(P):STANDBY.SDIS")
#! Link("$(P):STANDBY.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):ON",340,148,0,0,"$(P):ON")
#! Field("$(P):ON.SDIS",16777215,0,"$(P):ON.SDIS")
#! Link("$(P):ON.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):RESPONSE",960,748,0,0,"$(P):RESPONSE")
#! Field("$(P):RESPONSE.VAL",16777215,0,"$(P):RESPONSE.VAL")
#! Field("$(P):RESPONSE.SDIS",16777215,0,"$(P):RESPONSE.SDIS")
#! Link("$(P):RESPONSE.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):COMMAND",660,742,0,0,"$(P):COMMAND")
#! Field("$(P):COMMAND.FLNK",16777215,1,"$(P):COMMAND.FLNK")
#! Link("$(P):COMMAND.FLNK","$(P):RESPONSE")
#! Field("$(P):COMMAND.OUT",16777215,1,"$(P):COMMAND.OUT")
#! Link("$(P):COMMAND.OUT","$(P):RESPONSE.VAL")
#! Record("$(P):DISABLE",340,540,0,1,"$(P):DISABLE")
#! Field("$(P):DISABLE.VAL",16777215,1,"$(P):DISABLE.VAL")
#! Record("$(P):ERROR",260,30,0,0,"$(P):ERROR")
