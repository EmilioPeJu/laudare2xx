#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("../../dbd/laudaRE2xx.dbd")
#! DBDEND


################################################################
#
# Template file for lauda ecoline star edition, also valid for
# ecoline silver, ecoline gold and proline devices
#
# Macros:
# % macro,  P,    Prefix for PV name
# % macro,  PORT, Bus/Port Address (eg. ASYN Port).
# % macro,  ADDR, Address on the bus (optional)
# % macro,  SCAN, SCAN rate for read parameters.
# % macro,  HIHI, HIHI value for input temperature
# % macro,  HIGH, HIGH value for input temperature
# % macro,  LOW,  LOW value for input temperature
# % macro,  LOLO, LOLO value for input temperature
# % macro,  name, object and gui association name
# % macro,  DESC, Description
#
################################################################
# % gui, $(name=), edmembed, lRE2xx_embed.edl, P=$(P),EDM_FILE=lRE2xx.edl
# % gui, $(name=), edm, EDM_FILE=lRE2xx.edl, P=$(P)
# % gui, $(name=), boydetail,laudaRE2xxApp_opi/laudaRE2xx_detail.opi, P=$(P), DESC=$(DESC)
# % gui, $(name=), boyembed, laudaRE2xxApp_opi/laudaRE2xx_embed_box.opi, P=$(P), DESC=$(DESC)
# % gui, $(name=), boyembed, laudaRE2xxApp_opi/laudaRE2xx_embed.opi, P=$(P), DESC=$(DESC)
# % gui, $(name=), enum, Communications,   $(P):DISABLE
# % gui, $(name=), demand, Water temperature,   $(P):SET_TEMP
# % gui, $(name=), readback, Water temperature,   $(P):TEMP
# % gui, $(name=), statusbits, Status,   $(P):STATUS, Over Temperature, Water Low Level, Pump Blocked, Internal Fault 1, Internal Fault 2
# % gui, $(name=), demand, Command,   $(P):COMMAND
# % gui, $(name=), readback, Response,   $(P):RESPONSE
################################################################
# Read records
################################################################
# ///
# /// Read the water temperature.
# ///
#% archiver 10 Monitor
#% alh $SEVRCOMMAND UP_ANY dls-alh-handler.py $(P):TEMP
record(ai, "$(P):TEMP") {
  field(DTYP, "stream")
  field(INP, "@lRE2xx.proto getTemp $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(EGU, "C")
  field(HIHI, "$(HIHI)")
  field(HIGH, "$(HIGH)")
  field(LOW, "$(LOW)")
  field(LOLO, "$(LOLO)")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
  field(LLSV, "MAJOR")
  field(PREC, "2")
  field(HYST, "0.1")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read the external pt100 temperature.
# ///
# % archiver 10 Monitor
record(ai, "$(P):EXT_TEMP") {
  field(DTYP, "stream")
  field(INP, "@lRE2xx.proto getExtTemp($(P)) $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(EGU, "C")
  field(HIHI, "$(HIHI)")
  field(HIGH, "$(HIGH)")
  field(LOW, "$(LOW)")
  field(LOLO, "$(LOLO)")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
  field(LLSV, "MAJOR")
  field(PREC, "2")
  field(HYST, "0.1")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read temperature setpoint (read back of setTemp)
# ///
# % archiver 10 Monitor
record(ai, "$(P):SET_TEMP:RBV") {
  field(DTYP, "stream")
  field(INP, "@lRE2xx.proto getTempReadback $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(EGU, "C")
  field(PREC, "2")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read the water bath level (height above the minimum).
# ///
#% archiver 10 Monitor
record(longin, "$(P):LEVELRAW") {
  field(DTYP, "stream")
  field(INP, "@lRE2xx.proto getLevel($(P)) $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(SDIS, "$(P):DISABLE")
  field(FLNK, "$(P):LEVEL")
}

record(calc, "$(P):LEVEL") {
  field(INPA, "$(P):LEVELRAW NPP MS")
  field(CALC, "A*10")
  field(EGU, "mm")
  field(LOLO, "0")
  field(LOW, "10")
}

# ///
# /// Read the status bits
# ///
#% archiver 10 Monitor
#% alh $SEVRCOMMAND UP_ANY dls-alh-handler.py $(P):STATUS
record(ai, "$(P):STATUS") {
  field(DTYP, "stream")
  field(INP, "@lRE2xx.proto getStatus $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(HHSV, "MAJOR")
  field(HIHI, "1")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read the power status
# ///
record(bi, "$(P):POWER") {
  field(DTYP, "stream")
  field(INP, "@lRE2xx.proto getPowerStatus $(PORT) $(ADDR)")
  field(SCAN, "1 second")
  field(ZNAM, "On")
  field(ONAM, "Off")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read which program is running now (0=none)
# ///
record(ai, "$(P):PROGRUNNING_RAW") {
  field(DESC, "Program number currently running")
  field(DTYP, "stream")
  field(INP, "@lRE2xx.proto getProgRunning $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(SDIS, "$(P):DISABLE")
  field(FLNK, "$(P):PROGRUNNING")
}

record(calcout, "$(P):PROGRUNNING") {
  field(DESC, "Is any program running now")
  field(INPA, "$(P):PROGRUNNING_RAW")
  field(CALC, "A>0")
}

# ///
# /// Read the control variable
# ///
record(bi, "$(P):CONTROL_VAR") {
  field(DESC, "Current control variable")
  field(DTYP, "stream")
  field(INP, "@lRE2xx.proto getControlVariable $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(ZNAM, "Internal")
  field(ONAM, "Ext Pt100")
  field(SDIS, "$(P):DISABLE")
}

################################################################
# Write records
################################################################
# ///
# /// Set the setpoint water temperature (temperature must be specific format (up to 3 digits before decimal point and up to 2 digits after decimal point).
# ///
#% autosave 1 VAL
record(ao, "$(P):SET_TEMP") {
  field(DTYP, "stream")
  field(DESC, "Setpoint temperature")
  field(OUT, "@lRE2xx.proto setTemp $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Switch device to standby
# ///
record(bo, "$(P):STANDBY") {
  field(DTYP, "stream")
  field(DESC, "Switch device to standby")
  field(OUT, "@lRE2xx.proto stop $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Switch device on
# ///
record(bo, "$(P):ON") {
  field(DTYP, "stream")
  field(DESC, "Switch device on")
  field(OUT, "@lRE2xx.proto start $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Set the control variable
# ///
record(bo, "$(P):SET_CONTROL_VAR") {
  field(DESC, "Set control variable")
  field(DTYP, "stream")
  field(OUT, "@lRE2xx.proto setControlVariable($(P)) $(PORT) $(ADDR)")
  field(ZNAM, "Internal")
  field(ONAM, "Ext Pt100")
  field(SDIS, "$(P):DISABLE")
}

################################################################
# Ramping
################################################################
# ///
# /// Set the ramp target temperature
# ///
#% autosave 1 VAL
record(ao, "$(P):RTEMP") {
  field(DESC, "Ramp target temperature")
  field(PREC, "2")
  field(EGU, "C")
  field(PINI, "YES")
  field(FLNK, "$(P):RTIME")
}

# ///
# /// Set the ramp rate
# ///
#% autosave 1 VAL
record(ao, "$(P):RRATE") {
  field(DESC, "Ramp rate")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "C/min")
  field(FLNK, "$(P):RTIME")
  field(DRVH, "$(RRDRVH=10.00)")
  field(DRVL, "$(RRDRVL=0.01)")
}

# ///
# /// Calculate the ramp time
# ///
record(calc, "$(P):RTIME") {
  field(DESC, "Ramp time")
  field(INPA, "$(P):RRATE")
  field(INPB, "$(P):TEMP")
  field(INPC, "$(P):RTEMP")
  field(CALC, "ABS(C-B)/A")
  field(EGU, "min")
}

# ///
# /// Start the ramp program
# ///
record(ao, "$(P):RSTART") {
  field(DESC, "Start program")
  field(DTYP, "stream")
  field(OUT, "@lRE2xx.proto startProg($(P)) $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Stop the ramp program
# ///
record(ao, "$(P):RSTOP") {
  field(DESC, "Stop program")
  field(DTYP, "stream")
  field(OUT, "@lRE2xx.proto stopProg $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
  field(FLNK, "$(P):RSTOP_POS")
}

record(dfanout, "$(P):RSTOP_POS") {
  field(DESC, "Adjust setpoint temperature")
  field(OMSL, "closed_loop")
  field(DOL, "$(P):TEMP")
  field(OUTA, "$(P):SET_TEMP PP")
}

#################################################################
# Generic protocol PV, to send any command.
#################################################################
# ///
# /// Generic commands. Do a caput on this, and do a subsequent caget to get the response. Max 39 chars.
# ///
record(stringin, "$(P):RESPONSE") {
  field(DTYP, "stream")
  field(DESC, "Command string response.")
  field(INP, "@lRE2xx.proto gen $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Generic command. This holds the command and stores it.
# ///
record(stringout, "$(P):COMMAND") {
  field(DESC, "Holds command string.")
  field(OUT, "$(P):RESPONSE")
  field(FLNK, "$(P):RESPONSE")
}

# % autosave 1 VAL
record(bo, "$(P):DISABLE") {
  field(DESC, "Disable comms")
  field(PINI, "YES")
  field(VAL, "1")
  field(OMSL, "supervisory")
  field(ZNAM, "Enabled")
  field(ONAM, "Disabled")
}

#################################################################
# Error status (From protocol mismatch)
#################################################################
record(stringin, "$(P):ERROR") {
  field(DESC, "Error response")
}

#! Further lines contain data used by VisualDCT
#! View(266,0,1.0)
#! Record("$(P):TEMP",40,35,0,0,"$(P):TEMP")
#! Field("$(P):TEMP.SDIS",16777215,1,"$(P):TEMP.SDIS")
#! Link("$(P):TEMP.SDIS","$(P):DISABLE.VAL")
#! Field("$(P):TEMP.VAL",16777215,1,"$(P):TEMP.VAL")
#! Record("$(P):EXT_TEMP",360,15,0,1,"$(P):EXT_TEMP")
#! Field("$(P):EXT_TEMP.SDIS",16777215,0,"$(P):EXT_TEMP.SDIS")
#! Link("$(P):EXT_TEMP.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):SET_TEMP:RBV",20,20,0,0,"$(P):SET_TEMP:RBV")
#! Field("$(P):SET_TEMP:RBV.SDIS",16777215,1,"$(P):SET_TEMP:RBV.SDIS")
#! Link("$(P):SET_TEMP:RBV.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):LEVELRAW",680,54,0,0,"$(P):LEVELRAW")
#! Field("$(P):LEVELRAW.SDIS",16777215,0,"$(P):LEVELRAW.SDIS")
#! Link("$(P):LEVELRAW.SDIS","$(P):DISABLE.VAL")
#! Field("$(P):LEVELRAW.FLNK",16777215,1,"$(P):LEVELRAW.FLNK")
#! Link("$(P):LEVELRAW.FLNK","$(P):LEVEL")
#! Field("$(P):LEVELRAW.VAL",16777215,1,"$(P):LEVELRAW.VAL")
#! Record("$(P):LEVEL",1060,114,0,0,"$(P):LEVEL")
#! Field("$(P):LEVEL.INPA",16777215,0,"$(P):LEVEL.INPA")
#! Link("$(P):LEVEL.INPA","$(P):LEVELRAW.VAL")
#! Record("$(P):STATUS",40,340,0,0,"$(P):STATUS")
#! Field("$(P):STATUS.SDIS",16777215,1,"$(P):STATUS.SDIS")
#! Link("$(P):STATUS.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):POWER",260,20,0,0,"$(P):POWER")
#! Field("$(P):POWER.SDIS",16777215,1,"$(P):POWER.SDIS")
#! Link("$(P):POWER.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):PROGRUNNING_RAW",500,20,0,0,"$(P):PROGRUNNING_RAW")
#! Field("$(P):PROGRUNNING_RAW.SDIS",16777215,0,"$(P):PROGRUNNING_RAW.SDIS")
#! Link("$(P):PROGRUNNING_RAW.SDIS","$(P):DISABLE.VAL")
#! Field("$(P):PROGRUNNING_RAW.FLNK",16777215,1,"$(P):PROGRUNNING_RAW.FLNK")
#! Link("$(P):PROGRUNNING_RAW.FLNK","$(P):PROGRUNNING")
#! Field("$(P):PROGRUNNING_RAW.VAL",16777215,0,"$(P):PROGRUNNING_RAW.VAL")
#! Record("$(P):PROGRUNNING",740,22,0,1,"$(P):PROGRUNNING")
#! Field("$(P):PROGRUNNING.INPA",16777215,0,"$(P):PROGRUNNING.INPA")
#! Link("$(P):PROGRUNNING.INPA","$(P):PROGRUNNING_RAW.VAL")
#! Record("$(P):CONTROL_VAR",980,26,0,0,"$(P):CONTROL_VAR")
#! Field("$(P):CONTROL_VAR.SDIS",16777215,0,"$(P):CONTROL_VAR.SDIS")
#! Link("$(P):CONTROL_VAR.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):SET_TEMP",60,748,0,0,"$(P):SET_TEMP")
#! Field("$(P):SET_TEMP.SDIS",16777215,1,"$(P):SET_TEMP.SDIS")
#! Link("$(P):SET_TEMP.SDIS","$(P):DISABLE.VAL")
#! Field("$(P):SET_TEMP.VAL",16777215,1,"$(P):SET_TEMP.VAL")
#! Record("$(P):STANDBY",1220,28,0,0,"$(P):STANDBY")
#! Field("$(P):STANDBY.SDIS",16777215,0,"$(P):STANDBY.SDIS")
#! Link("$(P):STANDBY.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):ON",1460,28,0,0,"$(P):ON")
#! Field("$(P):ON.SDIS",16777215,0,"$(P):ON.SDIS")
#! Link("$(P):ON.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):SET_CONTROL_VAR",1700,20,0,0,"$(P):SET_CONTROL_VAR")
#! Field("$(P):SET_CONTROL_VAR.SDIS",16777215,0,"$(P):SET_CONTROL_VAR.SDIS")
#! Link("$(P):SET_CONTROL_VAR.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):RTEMP",1940,14,0,0,"$(P):RTEMP")
#! Field("$(P):RTEMP.FLNK",16777215,1,"$(P):RTEMP.FLNK")
#! Link("$(P):RTEMP.FLNK","$(P):RTIME")
#! Field("$(P):RTEMP.VAL",16777215,1,"$(P):RTEMP.VAL")
#! Record("$(P):RRATE",2180,26,0,0,"$(P):RRATE")
#! Field("$(P):RRATE.FLNK",16777215,1,"$(P):RRATE.FLNK")
#! Link("$(P):RRATE.FLNK","$(P):RTIME")
#! Field("$(P):RRATE.VAL",16777215,0,"$(P):RRATE.VAL")
#! Record("$(P):RTIME",2420,20,0,0,"$(P):RTIME")
#! Field("$(P):RTIME.INPA",16777215,0,"$(P):RTIME.INPA")
#! Link("$(P):RTIME.INPA","$(P):RRATE.VAL")
#! Field("$(P):RTIME.INPB",16777215,0,"$(P):RTIME.INPB")
#! Link("$(P):RTIME.INPB","$(P):TEMP.VAL")
#! Field("$(P):RTIME.INPC",16777215,0,"$(P):RTIME.INPC")
#! Link("$(P):RTIME.INPC","$(P):RTEMP.VAL")
#! Record("$(P):RSTART",2660,28,0,0,"$(P):RSTART")
#! Field("$(P):RSTART.SDIS",16777215,0,"$(P):RSTART.SDIS")
#! Link("$(P):RSTART.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):RSTOP",2900,14,0,0,"$(P):RSTOP")
#! Field("$(P):RSTOP.SDIS",16777215,0,"$(P):RSTOP.SDIS")
#! Link("$(P):RSTOP.SDIS","$(P):DISABLE.VAL")
#! Field("$(P):RSTOP.FLNK",16777215,1,"$(P):RSTOP.FLNK")
#! Link("$(P):RSTOP.FLNK","$(P):RSTOP_POS")
#! Record("$(P):RSTOP_POS",3140,28,0,1,"$(P):RSTOP_POS")
#! Field("$(P):RSTOP_POS.DOL",16777215,0,"$(P):RSTOP_POS.DOL")
#! Link("$(P):RSTOP_POS.DOL","$(P):TEMP.VAL")
#! Field("$(P):RSTOP_POS.OUTA",16777215,0,"$(P):RSTOP_POS.OUTA")
#! Link("$(P):RSTOP_POS.OUTA","$(P):SET_TEMP.VAL")
#! Record("$(P):RESPONSE",940,748,0,0,"$(P):RESPONSE")
#! Field("$(P):RESPONSE.VAL",16777215,0,"$(P):RESPONSE.VAL")
#! Field("$(P):RESPONSE.SDIS",16777215,0,"$(P):RESPONSE.SDIS")
#! Link("$(P):RESPONSE.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):COMMAND",580,742,0,0,"$(P):COMMAND")
#! Field("$(P):COMMAND.FLNK",16777215,1,"$(P):COMMAND.FLNK")
#! Link("$(P):COMMAND.FLNK","$(P):RESPONSE")
#! Field("$(P):COMMAND.OUT",16777215,1,"$(P):COMMAND.OUT")
#! Link("$(P):COMMAND.OUT","$(P):RESPONSE.VAL")
#! Record("$(P):DISABLE",340,540,0,1,"$(P):DISABLE")
#! Field("$(P):DISABLE.VAL",16777215,1,"$(P):DISABLE.VAL")
#! Record("$(P):ERROR",3380,10,0,0,"$(P):ERROR")
