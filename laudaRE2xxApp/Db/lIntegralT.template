#! Generated by VisualDCT v2.6
#! DBDSTART
#! DBD("../../dbd/laudaRE2xx.dbd")
#! DBDEND

################################################################
#
# Lauda Integral T template file.
#
# Macros:
# % macro,  P,    Prefix for PV name
# % macro,  PORT, Bus/Port Address (eg. ASYN Port).
# % macro,  ADDR, Address on the bus (optional)
# % macro,  SCAN, SCAN rate for read parameters.
# % macro,  HIHI, HIHI value for input temperature
# % macro,  HIGH, HIGH value for input temperature
# % macro,  LOW,  LOW value for input temperature
# % macro,  LOLO, LOLO value for input temperature
# % macro,  TEMPDESC, DESC field value on the TEMP record (water temperature).  Defaults to Chiller water temp
# % macro,  RRDRVH,	Ramp rate upper clipping point [C/min]
# % macro,  RRDRVL, Ramp rate lower clipping point [C/min]
# % macro,  name, object and gui association name
# % macro,  DESC, Description
#
################################################################
# % gui, $(name=), edmembed, lRE2xx_embed.edl, P=$(P),EDM_FILE=lIntegralT.edl
# % gui, $(name=), edm, EDM_FILE=lIntegralT.edl, P=$(P)
################################################################
# Read records
################################################################
# ///
# /// Read the water temperature.
# ///
#% archiver 10 Monitor
#% alh $SEVRCOMMAND UP_ANY dls-alh-handler.py $(P):TEMP
record(ai, "$(P):TEMP") {
  field(DESC, "$(TEMPDESC=Chiller water temp)")
  field(DTYP, "stream")
  field(INP, "@lIntegralT.proto getTemp $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(EGU, "C")
  field(HIHI, "$(HIHI)")
  field(HIGH, "$(HIGH)")
  field(LOW, "$(LOW)")
  field(LOLO, "$(LOLO)")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
  field(LLSV, "MAJOR")
  field(PREC, "2")
  field(HYST, "0.1")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read the external pt100 temperature.
# ///
# % archiver 10 Monitor
record(ai, "$(P):EXT_TEMP") {
  field(DTYP, "stream")
  field(INP, "@lIntegralT.proto getExtTemp($(P)) $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(EGU, "C")
  field(HIHI, "$(HIHI)")
  field(HIGH, "$(HIGH)")
  field(LOW, "$(LOW)")
  field(LOLO, "$(LOLO)")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  field(LSV, "MINOR")
  field(LLSV, "MAJOR")
  field(PREC, "2")
  field(HYST, "0.1")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read temperature setpoint (read back of setTemp)
# ///
# % archiver 10 Monitor
record(ai, "$(P):SET_TEMP:RBV") {
  field(DTYP, "stream")
  field(INP, "@lIntegralT.proto getTempReadback $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(EGU, "C")
  field(PREC, "2")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read the status bits
# ///
#% archiver 10 Monitor
#% alh $SEVRCOMMAND UP_ANY dls-alh-handler.py $(P):STATUS
record(ai, "$(P):STATUS") {
  field(DTYP, "stream")
  field(INP, "@lIntegralT.proto getStatus $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(HHSV, "MAJOR")
  field(HIHI, "1")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read the power status
# ///
record(bi, "$(P):POWER") {
  field(DTYP, "stream")
  field(INP, "@lIntegralT.proto getPowerStatus $(PORT) $(ADDR)")
  field(SCAN, "1 second")
  field(ZNAM, "On")
  field(ONAM, "Off")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Read which program is running now (0=none)
# ///
record(ai, "$(P):PROGRUNNING_RAW") {
  field(DESC, "Program number currently running")
  field(DTYP, "stream")
  field(INP, "@lIntegralT.proto getProgRunning $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(SDIS, "$(P):DISABLE")
  field(FLNK, "$(P):PROGRUNNING")
}

record(calcout, "$(P):PROGRUNNING") {
  field(DESC, "Is any program running now")
  field(INPA, "$(P):PROGRUNNING_RAW")
  field(CALC, "A>0")
}

# ///
# /// Read the control variable
# ///
record(bi, "$(P):CONTROL_VAR") {
  field(DESC, "Current control variable")
  field(DTYP, "stream")
  field(INP, "@lIntegralT.proto getControlVariable $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(ZNAM, "Internal")
  field(ONAM, "Ext Pt100")
  field(SDIS, "$(P):DISABLE")
}

################################################################
# Write records
################################################################
# ///
# /// Set the setpoint water temperature (temperature must be specific format (up to 3 digits before decimal point and up to 2 digits after decimal point).
# ///
#% autosave 1 VAL
record(ao, "$(P):SET_TEMP") {
  field(DTYP, "stream")
  field(DESC, "Setpoint temperature")
  field(OUT, "@lIntegralT.proto setTemp $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Switch device to standby
# ///
record(bo, "$(P):STANDBY") {
  field(DTYP, "stream")
  field(DESC, "Switch device to standby")
  field(OUT, "@lIntegralT.proto stop $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Switch device on
# ///
record(bo, "$(P):ON") {
  field(DTYP, "stream")
  field(DESC, "Switch device on")
  field(OUT, "@lIntegralT.proto start $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Set the control variable
# ///
record(bo, "$(P):SET_CONTROL_VAR") {
  field(DESC, "Set control variable")
  field(DTYP, "stream")
  field(OUT, "@lIntegralT.proto setControlVariable($(P)) $(PORT) $(ADDR)")
  field(ZNAM, "Internal")
  field(ONAM, "Ext Pt100")
  field(SDIS, "$(P):DISABLE")
}

################################################################
# Ramping
################################################################
# ///
# /// Set the ramp target temperature
# ///
#% autosave 1 VAL
record(ao, "$(P):RTEMP") {
  field(DESC, "Ramp target temperature")
  field(PREC, "2")
  field(EGU, "C")
  field(PINI, "YES")
  field(FLNK, "$(P):RTIME")
}

# ///
# /// Set the ramp rate
# ///
#% autosave 1 VAL
record(ao, "$(P):RRATE") {
  field(DESC, "Ramp rate")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "C/min")
  field(FLNK, "$(P):RTIME")
  field(DRVH, "$(RRDRVH=10.00)")
  field(DRVL, "$(RRDRVL=0.01)")
}

# ///
# /// Calculate the ramp time
# ///
record(calc, "$(P):RTIME") {
  field(DESC, "Ramp time")
  field(INPA, "$(P):RRATE")
  field(INPB, "$(P):TEMP")
  field(INPC, "$(P):RTEMP")
  field(CALC, "ABS(C-B)/A")
  field(EGU, "min")
}

# ///
# /// Start the ramp program
# ///
record(ao, "$(P):RSTART") {
  field(DESC, "Start program")
  field(DTYP, "stream")
  field(OUT, "@lIntegralT.proto startProg($(P)) $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Stop the ramp program
# ///
record(ao, "$(P):RSTOP") {
  field(DESC, "Stop program")
  field(DTYP, "stream")
  field(OUT, "@lIntegralT.proto stopProg $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
  field(FLNK, "$(P):RSTOP_POS")
}

record(dfanout, "$(P):RSTOP_POS") {
  field(DESC, "Adjust setpoint temperature")
  field(OMSL, "closed_loop")
  field(DOL, "$(P):TEMP")
  field(OUTA, "$(P):SET_TEMP PP")
}

#################################################################
# Generic protocol PV, to send any command.
#################################################################
# ///
# /// Generic commands. Do a caput on this, and do a subsequent caget to get the response. Max 39 chars.
# ///
record(stringin, "$(P):RESPONSE") {
  field(DTYP, "stream")
  field(DESC, "Command string response.")
  field(INP, "@lIntegralT.proto gen $(PORT) $(ADDR)")
  field(SDIS, "$(P):DISABLE")
}

# ///
# /// Generic command. This holds the command and stores it.
# ///
record(stringout, "$(P):COMMAND") {
  field(DESC, "Holds command string.")
  field(OUT, "$(P):RESPONSE")
  field(FLNK, "$(P):RESPONSE")
}

# % autosave 1 VAL
record(bo, "$(P):DISABLE") {
  field(DESC, "Disable communication")
  field(PINI, "YES")
  field(VAL, "1")
  field(OMSL, "supervisory")
  field(ZNAM, "Enabled")
  field(ONAM, "Disabled")
}

#################################################################
# Error status (From protocol mismatch)
#################################################################
record(stringin, "$(P):ERROR") {
  field(DESC, "Error response")
}

#! Further lines contain data used by VisualDCT
#! View(143,75,1.0)
#! Record("$(P):TEMP",40,35,0,0,"$(P):TEMP")
#! Field("$(P):TEMP.SDIS",16777215,1,"$(P):TEMP.SDIS")
#! Link("$(P):TEMP.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):EXT_TEMP",720,395,0,0,"$(P):EXT_TEMP")
#! Field("$(P):EXT_TEMP.SDIS",16777215,0,"$(P):EXT_TEMP.SDIS")
#! Link("$(P):EXT_TEMP.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):STATUS",40,480,0,0,"$(P):STATUS")
#! Field("$(P):STATUS.SDIS",16777215,1,"$(P):STATUS.SDIS")
#! Link("$(P):STATUS.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):SET_TEMP",280,28,0,0,"$(P):SET_TEMP")
#! Field("$(P):SET_TEMP.SDIS",16777215,1,"$(P):SET_TEMP.SDIS")
#! Link("$(P):SET_TEMP.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):RESPONSE",820,128,0,0,"$(P):RESPONSE")
#! Field("$(P):RESPONSE.VAL",16777215,0,"$(P):RESPONSE.VAL")
#! Field("$(P):RESPONSE.SDIS",16777215,0,"$(P):RESPONSE.SDIS")
#! Link("$(P):RESPONSE.SDIS","$(P):DISABLE.VAL")
#! Record("$(P):COMMAND",540,82,0,0,"$(P):COMMAND")
#! Field("$(P):COMMAND.FLNK",16777215,1,"$(P):COMMAND.FLNK")
#! Link("$(P):COMMAND.FLNK","$(P):RESPONSE")
#! Field("$(P):COMMAND.OUT",16777215,1,"$(P):COMMAND.OUT")
#! Link("$(P):COMMAND.OUT","$(P):RESPONSE.VAL")
#! Record("$(P):DISABLE",320,200,0,1,"$(P):DISABLE")
#! Field("$(P):DISABLE.VAL",16777215,1,"$(P):DISABLE.VAL")
