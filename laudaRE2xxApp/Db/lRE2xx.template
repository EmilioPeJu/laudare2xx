################################################################
#
# Lauda Ecoline Staredition RE2xx template file.
#
# Macros:
#   P - Prefix for PV name
#   PORT - Bus/Port Address (eg. ASYN Port).
#   ADDR - Address on the bus (optional)
#   SCAN - SCAN rate for read parameters.
#
# Notes:
#   Temperature reading is handled by the alarm handler
#
################################################################

#% gdatag,template,lRE2xx,$(gda_name),$(gda_desc)


################################################################
# Read records
################################################################

# ///
# /// Read the water temperature.
# ///
#% gdatag,pv,ro,$(gda_name),TEMP
#% archiver 10 Monitor
#% alh
record(ai, "$(P):TEMP") {
  field(DTYP, "stream")
  field(INP, "@lRE2xx.proto getTemp $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(PREC, 6)
  field(EGU, "C")
}


# ///
# /// Read the status bits.
# ///
#% gdatag,array,ro,$(gda_name),STATUS
#% archiver 10 Monitor
#% alh
record(waveform, "$(P):STATUS") {
  field(DTYP, "stream")
  field(INP, "@lRE2xx.proto getStatus $(PORT) $(ADDR)")
  field(SCAN, "$(SCAN) second")
  field(NELM, "5")
  field(FTVL, "CHAR")
  field(FLNK, "$(P):STATUS:FAN")
}

record(fanout, "$(P):STATUS:FAN") {
  field(LNK1, "$(P):STATUS:B5")
}


# ///
# /// Read the over temperature status bit
# ///
record(subArray, "$(P):STATUS:B5") {
  field(FLNK, "$(P):FORMAT")
  field(FTVL, "CHAR")
  field(INP, "$(P):STATUS")
  field(MALM, "1")
  field(INDX, "4")
}

#################################################################
# Generic protocol PV, to send any command.
#################################################################

# ///
# /// Generic commands. Do a caput on this, and do a subsequent caget to get the response. Max 39 chars.
# ///
#% gdatag,pv,rw,$(gda_name),RESPONSE
record (stringin, "$(P):RESPONSE") {
  field (DTYP, "stream")
  field (DESC, "Holds response from command string.")
  field (INP, "@lRE2xx.proto gen $(PORT) $(ADDR)")
}

# ///
# /// Generic command. This holds the command and stores it.
# ///
#% gdatag,pv,rw,$(gda_name),COMMAND
record (stringout, "$(P):COMMAND") {
  field (DESC, "Holds command string.")
  field (OUT, "$(P):RESPONSE")
  field(FLNK, "$(P):RESPONSE")
}
